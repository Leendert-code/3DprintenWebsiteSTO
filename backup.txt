def role_required(*roles):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if current_user.is_anonymous:
                # Handle the case when the user is not logged in
                return redirect(url_for('/'))


            if 'admin' in roles and current_user.role != 'admin':
                # Handle the case when the user is not an admin
                return render_template('404.html'), 404

            if 'user' in roles and current_user.role != 'user':
                # Handle the case when the user is not a regular user
                return render_template('404.html'), 404

            return func(*args, **kwargs)
        
        return wrapper
    
    return decorator



            <h1>Printer Address: {{ address }}</h1>
            {% if printer_data %}
                {% if printer_data == "API niet correct" %}
                    <h2>De API sleutel is niet correct, meld dit bij je docent</h2>
                {% else %}
                    {% if printer_data.state.flags.operational %}
                        <h2>De printer is beschikbaar</h2>
                    {% else %}
                        <h2>De printer is niet beschikbaar</h2>
                    {% endif %}
                {% endif %}
            {% else %}
                <p>Het is niet gelukt om de printer informatie op te halen</p>
            {% endif %}


    
    
@app.route('/job_info')
def job_info():
    # Make a request to the external URL
    response = requests.get(external_url,api_route, headers={'X-Api-Key': api_key})
    
    # Check if the request was successful (status code 200)
    if response.status_code == 200:
        # Pass the received data to the HTML template
        job_data = response.json()
        return render_template('printen.html', job_data=job_data)
    else:
        # Handle the case when the request fails
        return render_template('error.html', message='Failed to fetch job data from the external API')
    




                    var requestData = {
                  "command": "start_transfer",
                  "handler_type": "api",
                  "port": "/dev/ttyUSB0",
                  "baudrate": 250000,
                  "local_path": "marlinbft/firmware.bin",
                  "comm_timeout_ms": 1000,
                  "wait_after_connect_ms": 3000,
                  "post_transfer_gcode_enable": true,
                  "post_transfer_gcode": ["M997"]
                };
                
                var xhr = new XMLHttpRequest();
                xhr.open('POST', 'http://172.23.145.241:5000/api/plugin/marlinbft');
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.setRequestHeader('X-Api-Key', 'BA625B5D37454705AB2CD17706C503D4');
                
                xhr.onload = function() {
                    if (xhr.status === 200) {
                        console.log('Command sent successfully');
                    } else {
                        console.error('Failed to send command');
                    }
                };
                
                xhr.send(JSON.stringify(requestData));






@app.route('/handle_button_click/<int:printer_id>', methods=['POST'])
def handle_button_click(printer_id):
    printer = Printers.query.filter_by(printerid=printer_id).first()

    if not printer:
        # Handle the case where the printer ID is not found in the database
        return redirect(url_for('homepage'))

    # Assuming you have defined the user levels in the Login class
    if current_user.is_authenticated and current_user.level == 2:
        api_url = printer.user_api
    else:
        api_url = printer.admin_api

    # Adding the authentication header
    headers = {'Authorization': 'Bearer BA625B5D37454705AB2CD17706C503D4'}  # Replace 'YOUR_API_KEY' with your actual API key

    # Make the request with the authentication header
    response = requests.get(api_url, headers=headers)

    # Optionally, you can handle the response here if needed
    # For example, you can check the response status code
    if response.status_code == 200:
        # Redirect to the external URL
        return redirect(api_url)
    else:
        # Handle the case where the request fails
        return "Failed to authenticate and redirect."

